// Place your key bindings in this file to override the defaults
[
    //ctrl+shift+s: symbol navigation
    //  goto:
    {
        "key": "ctrl+shift+t ctrl+shift+r",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+t ctrl+shift+t",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus"
    },
    //  peek:
    {
        "key": "ctrl+shift+t t",
        "command": "editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+t c",
        "command": "editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+t ctrl+shift+c",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus"
    },
    {
        "key": "ctrl+shift+t r",
        "command": "editor.action.referenceSearch.trigger"
    },
    //ctrl+shift+n Global navigation
    {
        "key": "ctrl+shift+n ctrl+shift+f",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+shift+n ctrl+shift+t",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+shift+n ctrl+shift+n",
        "command": "workbench.action.showCommands"
    },
    // in file
    {
        "key": "ctrl+shift+n s",
        "command": "workbench.action.gotoSymbol",
        "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
    },
    {
        "key": "ctrl+shift+n ctrl+shift+l",
        "command": "workbench.action.gotoLine"
    },
    //ctrl+shift+r 
    {
        "key": "ctrl+shift+r r",
        "command": "editor.action.refactor",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+r ctrl+shift+r",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    //context specific escape stuff
    {
        "key": "escape",
        "command": "workbench.action.closeSidebar",
        "when": "sideBarFocus"
    },
    {
        "key": "escape",
        "command": "workbench.action.closePanel",
        "when": "panelFocus"
    },
    //misc
    {
        "key": "ctrl+shift+s",
        "command": "saveAll"
    },
    {
        "key": "ctrl+shift+alt+s",
        "command": "searchEditorApplyChanges.apply",
        "when": "editorLangId == 'search-result'"
    },
    //Ruff
    {
        "key": "shift+alt+r shift+alt+c",
        "command": "workbench.action.tasks.runTask",
        "args": "ruff-fix-all-files-unsafe"
    },
    {
        "key": "shift+alt+r shift+alt+r",
        "command": "workbench.action.tasks.runTask",
        "args": "ruff-fix-current-file-unsafe",
        "when": "editorLangId == python"
    },
    //ctrl+alt+g: git mode
    {
        "key": "ctrl+alt+g ctrl+alt+s",
        "command": "workbench.action.tasks.runTask",
        "args": "git-stage-all"
    },
    {
        "key": "ctrl+alt+g ctrl+alt+c",
        "command": "workbench.action.tasks.runTask",
        "args": "git-commit"
    },
    {
        "key": "ctrl+alt+g ctrl+alt+r",
        "command": "workbench.action.tasks.runTask",
        "args": "git-push"
    },
    //  g: gitext-browse
    {
        "key": "ctrl+alt+g g g",
        "command": "workbench.action.tasks.runTask",
        "args": "gitext-browse-workspace"
    },
    {
        "key": "ctrl+alt+g g s",
        "command": "workbench.action.tasks.runTask",
        "args": "gitext-browse-user-config"
    },
    //  c: gitext-commit
    {
        "key": "ctrl+alt+g c c",
        "command": "workbench.action.tasks.runTask",
        "args": "gitext-commit-workspace"
    },
    {
        "key": "ctrl+alt+g c s",
        "command": "workbench.action.tasks.runTask",
        "args": "gitext-commit-user-config"
    },
    //ctrl+alt+t: tests mode
    //  r: run
    {
        "key": "ctrl+alt+t r a",
        "command": "testing.runAll"
    },
    {
        "key": "ctrl+alt+t r l",
        "command": "testing.reRunLastRun"
    },
    //  s: show/open mode
    {
        "key": "ctrl+alt+t s r",
        "command": "testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    //############# alt+d: document/current-file mode
    {
        "key": "shift+ctrl+d shift+ctrl+d",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    //######################## conflicting removed builtins
    {
        "key": "ctrl+r",//was constantly running this by accident
        "command": "-workbench.action.openRecent"
    },
    //########################  latest changes mode by the ui editor.......
    { //don't move this section or the contents of this file will get messed up when you edit things in the UI editor
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "alt+enter",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+shift+alt+f",
        "command": "search.action.openEditor"
    },
    {
        "key": "shift+alt+l",
        "command": "workbench.files.action.showActiveFileInExplorer"
    },
    {
        "key": "ctrl+alt+t ctrl+alt+f",
        "command": "testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1 f",
        "command": "-testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+d d",
        "command": "pylance.foldDocstrings"
    },
]